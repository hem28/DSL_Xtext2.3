/*
* generated by Xtext
*/

package org.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cNamespaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNsURIAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNsURISTRINGTerminalRuleCall_3_0 = (RuleCall)cNsURIAssignment_3.eContents().get(0);
		private final Assignment cItemsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cItemsItemParserRuleCall_4_0 = (RuleCall)cItemsAssignment_4.eContents().get(0);
		
		//Interface:
		//
		//	"Interface" name=ID "namespace:" nsURI=STRING items+=Item*;
		public ParserRule getRule() { return rule; }

		//"Interface" name=ID "namespace:" nsURI=STRING items+=Item*
		public Group getGroup() { return cGroup; }

		//"Interface"
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"namespace:"
		public Keyword getNamespaceKeyword_2() { return cNamespaceKeyword_2; }

		//nsURI=STRING
		public Assignment getNsURIAssignment_3() { return cNsURIAssignment_3; }

		//STRING
		public RuleCall getNsURISTRINGTerminalRuleCall_3_0() { return cNsURISTRINGTerminalRuleCall_3_0; }

		//items+=Item*
		public Assignment getItemsAssignment_4() { return cItemsAssignment_4; }

		//Item
		public RuleCall getItemsItemParserRuleCall_4_0() { return cItemsItemParserRuleCall_4_0; }
	}

	public class ItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Item");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Item:
		//
		//	Operation | Event;
		public ParserRule getRule() { return rule; }

		//Operation | Event
		public Alternatives getAlternatives() { return cAlternatives; }

		//Operation
		public RuleCall getOperationParserRuleCall_0() { return cOperationParserRuleCall_0; }

		//Event
		public RuleCall getEventParserRuleCall_1() { return cEventParserRuleCall_1; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cInsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cInsInparamParserRuleCall_2_0_0 = (RuleCall)cInsAssignment_2_0.eContents().get(0);
		private final Assignment cOutsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cOutsOutparamParserRuleCall_2_1_0 = (RuleCall)cOutsAssignment_2_1.eContents().get(0);
		
		//Operation:
		//
		//	"Operation" name=ID (ins+=Inparam | outs+=Outparam)*;
		public ParserRule getRule() { return rule; }

		//"Operation" name=ID (ins+=Inparam | outs+=Outparam)*
		public Group getGroup() { return cGroup; }

		//"Operation"
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(ins+=Inparam | outs+=Outparam)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ins+=Inparam
		public Assignment getInsAssignment_2_0() { return cInsAssignment_2_0; }

		//Inparam
		public RuleCall getInsInparamParserRuleCall_2_0_0() { return cInsInparamParserRuleCall_2_0_0; }

		//outs+=Outparam
		public Assignment getOutsAssignment_2_1() { return cOutsAssignment_2_1; }

		//Outparam
		public RuleCall getOutsOutparamParserRuleCall_2_1_0() { return cOutsOutparamParserRuleCall_2_1_0; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cOutsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutsOutparamParserRuleCall_2_0 = (RuleCall)cOutsAssignment_2.eContents().get(0);
		
		//Event:
		//
		//	"Event" name=ID outs=Outparam;
		public ParserRule getRule() { return rule; }

		//"Event" name=ID outs=Outparam
		public Group getGroup() { return cGroup; }

		//"Event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//outs=Outparam
		public Assignment getOutsAssignment_2() { return cOutsAssignment_2; }

		//Outparam
		public RuleCall getOutsOutparamParserRuleCall_2_0() { return cOutsOutparamParserRuleCall_2_0; }
	}

	public class InparamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inparam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeBuiltinTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Inparam:
		//
		//	"[in]" name=ID ":" type=BuiltinType;
		public ParserRule getRule() { return rule; }

		//"[in]" name=ID ":" type=BuiltinType
		public Group getGroup() { return cGroup; }

		//"[in]"
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=BuiltinType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//BuiltinType
		public RuleCall getTypeBuiltinTypeEnumRuleCall_3_0() { return cTypeBuiltinTypeEnumRuleCall_3_0; }
	}

	public class OutparamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Outparam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeBuiltinTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Outparam:
		//
		//	"[out]" name=ID ":" type=BuiltinType;
		public ParserRule getRule() { return rule; }

		//"[out]" name=ID ":" type=BuiltinType
		public Group getGroup() { return cGroup; }

		//"[out]"
		public Keyword getOutKeyword_0() { return cOutKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=BuiltinType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//BuiltinType
		public RuleCall getTypeBuiltinTypeEnumRuleCall_3_0() { return cTypeBuiltinTypeEnumRuleCall_3_0; }
	}
	
	
	public class BuiltinTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltinType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBooleanBooleanKeyword_0_0 = (Keyword)cBooleanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIntIntKeyword_2_0 = (Keyword)cIntEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTimeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTimeTimeKeyword_3_0 = (Keyword)cTimeEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDateDateKeyword_4_0 = (Keyword)cDateEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cStringStringKeyword_5_0 = (Keyword)cStringEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDecimalEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDecimalDecimalKeyword_6_0 = (Keyword)cDecimalEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDateTimeEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDateTimeDateTimeKeyword_7_0 = (Keyword)cDateTimeEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cPositiveIntegerEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cPositiveIntegerPositiveIntegerKeyword_8_0 = (Keyword)cPositiveIntegerEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cNonNegativeIntegerEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cNonNegativeIntegerNonNegativeIntegerKeyword_9_0 = (Keyword)cNonNegativeIntegerEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cTokenEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cTokenTokenKeyword_10_0 = (Keyword)cTokenEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cBase64BinaryEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cBase64BinaryBase64BinaryKeyword_11_0 = (Keyword)cBase64BinaryEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum BuiltinType:
		//
		//	boolean | integer | int | time | date | string | decimal | dateTime | positiveInteger | nonNegativeInteger | token |
		//
		//	base64Binary;
		public EnumRule getRule() { return rule; }

		//boolean | integer | int | time | date | string | decimal | dateTime | positiveInteger | nonNegativeInteger | token |
		//
		//base64Binary
		public Alternatives getAlternatives() { return cAlternatives; }

		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_0() { return cBooleanEnumLiteralDeclaration_0; }

		//"boolean"
		public Keyword getBooleanBooleanKeyword_0_0() { return cBooleanBooleanKeyword_0_0; }

		//integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }

		//"integer"
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }

		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_2() { return cIntEnumLiteralDeclaration_2; }

		//"int"
		public Keyword getIntIntKeyword_2_0() { return cIntIntKeyword_2_0; }

		//time
		public EnumLiteralDeclaration getTimeEnumLiteralDeclaration_3() { return cTimeEnumLiteralDeclaration_3; }

		//"time"
		public Keyword getTimeTimeKeyword_3_0() { return cTimeTimeKeyword_3_0; }

		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_4() { return cDateEnumLiteralDeclaration_4; }

		//"date"
		public Keyword getDateDateKeyword_4_0() { return cDateDateKeyword_4_0; }

		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_5() { return cStringEnumLiteralDeclaration_5; }

		//"string"
		public Keyword getStringStringKeyword_5_0() { return cStringStringKeyword_5_0; }

		//decimal
		public EnumLiteralDeclaration getDecimalEnumLiteralDeclaration_6() { return cDecimalEnumLiteralDeclaration_6; }

		//"decimal"
		public Keyword getDecimalDecimalKeyword_6_0() { return cDecimalDecimalKeyword_6_0; }

		//dateTime
		public EnumLiteralDeclaration getDateTimeEnumLiteralDeclaration_7() { return cDateTimeEnumLiteralDeclaration_7; }

		//"dateTime"
		public Keyword getDateTimeDateTimeKeyword_7_0() { return cDateTimeDateTimeKeyword_7_0; }

		//positiveInteger
		public EnumLiteralDeclaration getPositiveIntegerEnumLiteralDeclaration_8() { return cPositiveIntegerEnumLiteralDeclaration_8; }

		//"positiveInteger"
		public Keyword getPositiveIntegerPositiveIntegerKeyword_8_0() { return cPositiveIntegerPositiveIntegerKeyword_8_0; }

		//nonNegativeInteger
		public EnumLiteralDeclaration getNonNegativeIntegerEnumLiteralDeclaration_9() { return cNonNegativeIntegerEnumLiteralDeclaration_9; }

		//"nonNegativeInteger"
		public Keyword getNonNegativeIntegerNonNegativeIntegerKeyword_9_0() { return cNonNegativeIntegerNonNegativeIntegerKeyword_9_0; }

		//token
		public EnumLiteralDeclaration getTokenEnumLiteralDeclaration_10() { return cTokenEnumLiteralDeclaration_10; }

		//"token"
		public Keyword getTokenTokenKeyword_10_0() { return cTokenTokenKeyword_10_0; }

		//base64Binary
		public EnumLiteralDeclaration getBase64BinaryEnumLiteralDeclaration_11() { return cBase64BinaryEnumLiteralDeclaration_11; }

		//"base64Binary"
		public Keyword getBase64BinaryBase64BinaryKeyword_11_0() { return cBase64BinaryBase64BinaryKeyword_11_0; }
	}
	
	private InterfaceElements pInterface;
	private ItemElements pItem;
	private OperationElements pOperation;
	private EventElements pEvent;
	private InparamElements pInparam;
	private OutparamElements pOutparam;
	private BuiltinTypeElements unknownRuleBuiltinType;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Interface:
	//
	//	"Interface" name=ID "namespace:" nsURI=STRING items+=Item*;
	public InterfaceElements getInterfaceAccess() {
		return (pInterface != null) ? pInterface : (pInterface = new InterfaceElements());
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//Item:
	//
	//	Operation | Event;
	public ItemElements getItemAccess() {
		return (pItem != null) ? pItem : (pItem = new ItemElements());
	}
	
	public ParserRule getItemRule() {
		return getItemAccess().getRule();
	}

	//Operation:
	//
	//	"Operation" name=ID (ins+=Inparam | outs+=Outparam)*;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//Event:
	//
	//	"Event" name=ID outs=Outparam;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Inparam:
	//
	//	"[in]" name=ID ":" type=BuiltinType;
	public InparamElements getInparamAccess() {
		return (pInparam != null) ? pInparam : (pInparam = new InparamElements());
	}
	
	public ParserRule getInparamRule() {
		return getInparamAccess().getRule();
	}

	//Outparam:
	//
	//	"[out]" name=ID ":" type=BuiltinType;
	public OutparamElements getOutparamAccess() {
		return (pOutparam != null) ? pOutparam : (pOutparam = new OutparamElements());
	}
	
	public ParserRule getOutparamRule() {
		return getOutparamAccess().getRule();
	}

	//enum BuiltinType:
	//
	//	boolean | integer | int | time | date | string | decimal | dateTime | positiveInteger | nonNegativeInteger | token |
	//
	//	base64Binary;
	public BuiltinTypeElements getBuiltinTypeAccess() {
		return (unknownRuleBuiltinType != null) ? unknownRuleBuiltinType : (unknownRuleBuiltinType = new BuiltinTypeElements());
	}
	
	public EnumRule getBuiltinTypeRule() {
		return getBuiltinTypeAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
