/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Interface";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceRule()); }
	 iv_ruleInterface=ruleInterface 
	 { $current=$iv_ruleInterface.current; } 
	 EOF 
;

// Rule Interface
ruleInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Interface' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterfaceAccess().getInterfaceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='namespace:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceAccess().getNamespaceKeyword_2());
    }
(
(
		lv_nsURI_3_0=RULE_STRING
		{
			newLeafNode(lv_nsURI_3_0, grammarAccess.getInterfaceAccess().getNsURISTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nsURI",
        		lv_nsURI_3_0, 
        		"STRING");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getItemsItemParserRuleCall_4_0()); 
	    }
		lv_items_4_0=ruleItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"Item");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleItem
entryRuleItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemRule()); }
	 iv_ruleItem=ruleItem 
	 { $current=$iv_ruleItem.current; } 
	 EOF 
;

// Rule Item
ruleItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getItemAccess().getOperationParserRuleCall_0()); 
    }
    this_Operation_0=ruleOperation
    { 
        $current = $this_Operation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getItemAccess().getEventParserRuleCall_1()); 
    }
    this_Event_1=ruleEvent
    { 
        $current = $this_Event_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Operation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOperationAccess().getOperationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getInsInparamParserRuleCall_2_0_0()); 
	    }
		lv_ins_2_0=ruleInparam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"ins",
        		lv_ins_2_0, 
        		"Inparam");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getOutsOutparamParserRuleCall_2_1_0()); 
	    }
		lv_outs_3_0=ruleOutparam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"outs",
        		lv_outs_3_0, 
        		"Outparam");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Event' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEventAccess().getEventKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEventAccess().getOutsOutparamParserRuleCall_2_0()); 
	    }
		lv_outs_2_0=ruleOutparam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRule());
	        }
       		set(
       			$current, 
       			"outs",
        		lv_outs_2_0, 
        		"Outparam");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInparam
entryRuleInparam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInparamRule()); }
	 iv_ruleInparam=ruleInparam 
	 { $current=$iv_ruleInparam.current; } 
	 EOF 
;

// Rule Inparam
ruleInparam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[in]' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInparamAccess().getInKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getInparamAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInparamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInparamAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInparamAccess().getTypeBuiltinTypeEnumRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleBuiltinType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInparamRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"BuiltinType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOutparam
entryRuleOutparam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutparamRule()); }
	 iv_ruleOutparam=ruleOutparam 
	 { $current=$iv_ruleOutparam.current; } 
	 EOF 
;

// Rule Outparam
ruleOutparam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[out]' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOutparamAccess().getOutKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getOutparamAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutparamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOutparamAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutparamAccess().getTypeBuiltinTypeEnumRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleBuiltinType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutparamRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"BuiltinType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Rule BuiltinType
ruleBuiltinType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='boolean' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getBooleanEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBuiltinTypeAccess().getBooleanEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='integer' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getIntegerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBuiltinTypeAccess().getIntegerEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='int' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getIntEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBuiltinTypeAccess().getIntEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='time' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getTimeEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getBuiltinTypeAccess().getTimeEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='date' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getDateEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getBuiltinTypeAccess().getDateEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='string' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getStringEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getBuiltinTypeAccess().getStringEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='decimal' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getDecimalEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getBuiltinTypeAccess().getDecimalEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='dateTime' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getDateTimeEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getBuiltinTypeAccess().getDateTimeEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='positiveInteger' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getPositiveIntegerEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getBuiltinTypeAccess().getPositiveIntegerEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='nonNegativeInteger' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getNonNegativeIntegerEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getBuiltinTypeAccess().getNonNegativeIntegerEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='token' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getTokenEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getBuiltinTypeAccess().getTokenEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='base64Binary' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getBase64BinaryEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getBuiltinTypeAccess().getBase64BinaryEnumLiteralDeclaration_11()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


