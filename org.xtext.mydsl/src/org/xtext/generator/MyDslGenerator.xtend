/*
* generated by Xtext
*/
package org.xtext.generator
 
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.xtext.myDsl.Event
import org.xtext.myDsl.Inparam
import org.xtext.myDsl.Interface
import org.xtext.myDsl.Operation
import org.xtext.myDsl.Outparam
 
class MyDslGenerator implements IGenerator {
       
        override void doGenerate(Resource resource, IFileSystemAccess fsa) {
        val model = resource.contents.head as Interface
        fsa.generateFile(model.name + ".wsdl", model.wsdlFile)
        }
               
def private wsdlFile(Interface it)
'''
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
 
<wsdl:definitions       targetNamespace="«nsURI»"
                                        xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
                                        xmlns:tns="«nsURI»"
                                         xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/"
                                        xmlns:wsa="http://www.w3.org/2005/08/addressing">
 
<wsdl:types>
    <xs:schema targetNamespace="«nsURI»" xmlns:xs="http://www.w3.org/2001/XMLSchema">
     «FOR it : ins»
     <xs:element name="«name»" type="«type»" />
     «ENDFOR»
     «FOR it : outs»
     <xs:element name="«name»" type="«type»" />
     «ENDFOR»
     </xs:schema>
</wsdl:types>
 
        «FOR it : ins »
<wsdl:message name="«Inparam.name»" />
        «ENDFOR»
        «FOR it : outs »
<wsdl:message name="«Outparam.name»" >
        <wsdl:part name="parameters" element="tns:«element.name»" />
</wsdl:message>
        «ENDFOR»
       
 
 
<wsdl:portType name="«name»">«IF hasEvent()»n0:EventSource="true" xmlns:n0="http://schemas.xmlsoap.org/ws/2004/08/eventing">«ENDIF»
        «IF hasEvent()»
                <wsdl:operation name="«event.name»">
                «eventContents»
                </wsdl:operation>
        «ENDIF»
        «IF hasOperation()»
                <wsdl:operation name="«operation.name»">
                «FOR it : ins»
                «input»
                «ENDFOR»
                «FOR it : outs»
                «output»
                «ENDFOR»
                </wsdl:operation>
        «ENDIF»
</wsdl:portType>
 
<wsdl:binding name="«name»Binding" type="tns:«name»Type">
  <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
        «IF hasEvent()»
        <wsdl:operation name="«items.event.name»">               //should get the event name!
          <soap:operation soapAction="«nsURI»/«name»" />
                <wsdl:output>
                         <soap:body use="literal" />
                </wsdl:output>
        </wsdl:operation>
        «ENDIF»
        «IF hasOperation()»
        <wsdl:operation name="«name»">           //should get the operation name!
          <soap:operation soapAction="«nsURI»/«name»" />
                <wsdl:input>
                         <soap:body use="literal" />
                </wsdl:input>
                 <wsdl:output>
                         <soap:body use="literal" />
                </wsdl:output>
        </wsdl:operation>
        «ENDIF»
</wsdl:binding>
 
<wsdl:service name="«name»">
    <wsdl:port binding="tns:«name»Binding" name="«name»Port">
      <soap:address location="«nsURI»" />
    </wsdl:port>
</wsdl:service>
 
</wsdl:definitions>
'''
 
        def boolean hasOperation(Operation it){
        //if Operation(exists);
        true;
        }
 
        def boolean hasEvent(Event it){
                //if Event(exists);
        true;
        }
 
 
        def private eventContents(Outparam it, String nsURI )
        '''
        <wsdl:output message="tns:«name»" wsa:Action="«nsURI»/«name»" />
        '''
       
        def private output(Outparam it, String nsURI)
        '''
        <wsdl:output message="tns:«name»" wsa:Action="«nsURI»/«name»"/>
        '''
 
        def private input(Inparam it, String nsURI)
        '''
        <wsdl:input message="tns:«name»" wsa:Action="«nsURI»/«name»"/>
        '''
       
 
        }