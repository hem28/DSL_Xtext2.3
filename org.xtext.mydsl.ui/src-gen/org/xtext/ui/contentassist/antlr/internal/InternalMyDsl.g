/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.MyDslGrammarAccess;

}

@parser::members {
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleInterface
entryRuleInterface 
:
{ before(grammarAccess.getInterfaceRule()); }
	 ruleInterface
{ after(grammarAccess.getInterfaceRule()); } 
	 EOF 
;

// Rule Interface
ruleInterface
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceAccess().getGroup()); }
(rule__Interface__Group__0)
{ after(grammarAccess.getInterfaceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleItem
entryRuleItem 
:
{ before(grammarAccess.getItemRule()); }
	 ruleItem
{ after(grammarAccess.getItemRule()); } 
	 EOF 
;

// Rule Item
ruleItem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getItemAccess().getAlternatives()); }
(rule__Item__Alternatives)
{ after(grammarAccess.getItemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperation
entryRuleOperation 
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperationAccess().getGroup()); }
(rule__Operation__Group__0)
{ after(grammarAccess.getOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvent
entryRuleEvent 
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventAccess().getGroup()); }
(rule__Event__Group__0)
{ after(grammarAccess.getEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInparam
entryRuleInparam 
:
{ before(grammarAccess.getInparamRule()); }
	 ruleInparam
{ after(grammarAccess.getInparamRule()); } 
	 EOF 
;

// Rule Inparam
ruleInparam
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInparamAccess().getGroup()); }
(rule__Inparam__Group__0)
{ after(grammarAccess.getInparamAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOutparam
entryRuleOutparam 
:
{ before(grammarAccess.getOutparamRule()); }
	 ruleOutparam
{ after(grammarAccess.getOutparamRule()); } 
	 EOF 
;

// Rule Outparam
ruleOutparam
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOutparamAccess().getGroup()); }
(rule__Outparam__Group__0)
{ after(grammarAccess.getOutparamAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule BuiltinType
ruleBuiltinType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltinTypeAccess().getAlternatives()); }
(rule__BuiltinType__Alternatives)
{ after(grammarAccess.getBuiltinTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Item__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getItemAccess().getOperationParserRuleCall_0()); }
	ruleOperation
{ after(grammarAccess.getItemAccess().getOperationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getItemAccess().getEventParserRuleCall_1()); }
	ruleEvent
{ after(grammarAccess.getItemAccess().getEventParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getInsAssignment_2_0()); }
(rule__Operation__InsAssignment_2_0)
{ after(grammarAccess.getOperationAccess().getInsAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getOperationAccess().getOutsAssignment_2_1()); }
(rule__Operation__OutsAssignment_2_1)
{ after(grammarAccess.getOperationAccess().getOutsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltinType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBuiltinTypeAccess().getBooleanEnumLiteralDeclaration_0()); }
(	'boolean' 
)
{ after(grammarAccess.getBuiltinTypeAccess().getBooleanEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBuiltinTypeAccess().getIntegerEnumLiteralDeclaration_1()); }
(	'integer' 
)
{ after(grammarAccess.getBuiltinTypeAccess().getIntegerEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getBuiltinTypeAccess().getIntEnumLiteralDeclaration_2()); }
(	'int' 
)
{ after(grammarAccess.getBuiltinTypeAccess().getIntEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getBuiltinTypeAccess().getTimeEnumLiteralDeclaration_3()); }
(	'time' 
)
{ after(grammarAccess.getBuiltinTypeAccess().getTimeEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getBuiltinTypeAccess().getDateEnumLiteralDeclaration_4()); }
(	'date' 
)
{ after(grammarAccess.getBuiltinTypeAccess().getDateEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getBuiltinTypeAccess().getStringEnumLiteralDeclaration_5()); }
(	'string' 
)
{ after(grammarAccess.getBuiltinTypeAccess().getStringEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getBuiltinTypeAccess().getDecimalEnumLiteralDeclaration_6()); }
(	'decimal' 
)
{ after(grammarAccess.getBuiltinTypeAccess().getDecimalEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getBuiltinTypeAccess().getDateTimeEnumLiteralDeclaration_7()); }
(	'dateTime' 
)
{ after(grammarAccess.getBuiltinTypeAccess().getDateTimeEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getBuiltinTypeAccess().getPositiveIntegerEnumLiteralDeclaration_8()); }
(	'positiveInteger' 
)
{ after(grammarAccess.getBuiltinTypeAccess().getPositiveIntegerEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getBuiltinTypeAccess().getNonNegativeIntegerEnumLiteralDeclaration_9()); }
(	'nonNegativeInteger' 
)
{ after(grammarAccess.getBuiltinTypeAccess().getNonNegativeIntegerEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getBuiltinTypeAccess().getTokenEnumLiteralDeclaration_10()); }
(	'token' 
)
{ after(grammarAccess.getBuiltinTypeAccess().getTokenEnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getBuiltinTypeAccess().getBase64BinaryEnumLiteralDeclaration_11()); }
(	'base64Binary' 
)
{ after(grammarAccess.getBuiltinTypeAccess().getBase64BinaryEnumLiteralDeclaration_11()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Interface__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__0__Impl
	rule__Interface__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getInterfaceKeyword_0()); }

	'Interface' 

{ after(grammarAccess.getInterfaceAccess().getInterfaceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__1__Impl
	rule__Interface__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getNameAssignment_1()); }
(rule__Interface__NameAssignment_1)
{ after(grammarAccess.getInterfaceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__2__Impl
	rule__Interface__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getNamespaceKeyword_2()); }

	'namespace:' 

{ after(grammarAccess.getInterfaceAccess().getNamespaceKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__3__Impl
	rule__Interface__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getNsURIAssignment_3()); }
(rule__Interface__NsURIAssignment_3)
{ after(grammarAccess.getInterfaceAccess().getNsURIAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getItemsAssignment_4()); }
(rule__Interface__ItemsAssignment_4)*
{ after(grammarAccess.getInterfaceAccess().getItemsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Operation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__0__Impl
	rule__Operation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getOperationKeyword_0()); }

	'Operation' 

{ after(grammarAccess.getOperationAccess().getOperationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__1__Impl
	rule__Operation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getNameAssignment_1()); }
(rule__Operation__NameAssignment_1)
{ after(grammarAccess.getOperationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getAlternatives_2()); }
(rule__Operation__Alternatives_2)*
{ after(grammarAccess.getOperationAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Event__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEventKeyword_0()); }

	'Event' 

{ after(grammarAccess.getEventAccess().getEventKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__1__Impl
	rule__Event__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getNameAssignment_1()); }
(rule__Event__NameAssignment_1)
{ after(grammarAccess.getEventAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getOutsAssignment_2()); }
(rule__Event__OutsAssignment_2)
{ after(grammarAccess.getEventAccess().getOutsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Inparam__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inparam__Group__0__Impl
	rule__Inparam__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inparam__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInparamAccess().getInKeyword_0()); }

	'[in]' 

{ after(grammarAccess.getInparamAccess().getInKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Inparam__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inparam__Group__1__Impl
	rule__Inparam__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Inparam__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInparamAccess().getNameAssignment_1()); }
(rule__Inparam__NameAssignment_1)
{ after(grammarAccess.getInparamAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Inparam__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inparam__Group__2__Impl
	rule__Inparam__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Inparam__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInparamAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getInparamAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Inparam__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inparam__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inparam__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInparamAccess().getTypeAssignment_3()); }
(rule__Inparam__TypeAssignment_3)
{ after(grammarAccess.getInparamAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Outparam__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Outparam__Group__0__Impl
	rule__Outparam__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Outparam__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutparamAccess().getOutKeyword_0()); }

	'[out]' 

{ after(grammarAccess.getOutparamAccess().getOutKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Outparam__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Outparam__Group__1__Impl
	rule__Outparam__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Outparam__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutparamAccess().getNameAssignment_1()); }
(rule__Outparam__NameAssignment_1)
{ after(grammarAccess.getOutparamAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Outparam__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Outparam__Group__2__Impl
	rule__Outparam__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Outparam__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutparamAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getOutparamAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Outparam__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Outparam__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Outparam__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutparamAccess().getTypeAssignment_3()); }
(rule__Outparam__TypeAssignment_3)
{ after(grammarAccess.getOutparamAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Interface__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getInterfaceAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__NsURIAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getNsURISTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getInterfaceAccess().getNsURISTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__ItemsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getItemsItemParserRuleCall_4_0()); }
	ruleItem{ after(grammarAccess.getInterfaceAccess().getItemsItemParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__InsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getInsInparamParserRuleCall_2_0_0()); }
	ruleInparam{ after(grammarAccess.getOperationAccess().getInsInparamParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__OutsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationAccess().getOutsOutparamParserRuleCall_2_1_0()); }
	ruleOutparam{ after(grammarAccess.getOperationAccess().getOutsOutparamParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__OutsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getOutsOutparamParserRuleCall_2_0()); }
	ruleOutparam{ after(grammarAccess.getEventAccess().getOutsOutparamParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Inparam__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInparamAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getInparamAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Inparam__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInparamAccess().getTypeBuiltinTypeEnumRuleCall_3_0()); }
	ruleBuiltinType{ after(grammarAccess.getInparamAccess().getTypeBuiltinTypeEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Outparam__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutparamAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getOutparamAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Outparam__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutparamAccess().getTypeBuiltinTypeEnumRuleCall_3_0()); }
	ruleBuiltinType{ after(grammarAccess.getOutparamAccess().getTypeBuiltinTypeEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


